// Code generated by counterfeiter. DO NOT EDIT.
package csi_fake

import (
	"sync"

	"github.com/container-storage-interface/spec/lib/go/csi"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

type FakeIdentityClient struct {
	GetPluginInfoStub        func(ctx context.Context, in *csi.GetPluginInfoRequest, opts ...grpc.CallOption) (*csi.GetPluginInfoResponse, error)
	getPluginInfoMutex       sync.RWMutex
	getPluginInfoArgsForCall []struct {
		ctx  context.Context
		in   *csi.GetPluginInfoRequest
		opts []grpc.CallOption
	}
	getPluginInfoReturns struct {
		result1 *csi.GetPluginInfoResponse
		result2 error
	}
	getPluginInfoReturnsOnCall map[int]struct {
		result1 *csi.GetPluginInfoResponse
		result2 error
	}
	GetPluginCapabilitiesStub        func(ctx context.Context, in *csi.GetPluginCapabilitiesRequest, opts ...grpc.CallOption) (*csi.GetPluginCapabilitiesResponse, error)
	getPluginCapabilitiesMutex       sync.RWMutex
	getPluginCapabilitiesArgsForCall []struct {
		ctx  context.Context
		in   *csi.GetPluginCapabilitiesRequest
		opts []grpc.CallOption
	}
	getPluginCapabilitiesReturns struct {
		result1 *csi.GetPluginCapabilitiesResponse
		result2 error
	}
	getPluginCapabilitiesReturnsOnCall map[int]struct {
		result1 *csi.GetPluginCapabilitiesResponse
		result2 error
	}
	ProbeStub        func(ctx context.Context, in *csi.ProbeRequest, opts ...grpc.CallOption) (*csi.ProbeResponse, error)
	probeMutex       sync.RWMutex
	probeArgsForCall []struct {
		ctx  context.Context
		in   *csi.ProbeRequest
		opts []grpc.CallOption
	}
	probeReturns struct {
		result1 *csi.ProbeResponse
		result2 error
	}
	probeReturnsOnCall map[int]struct {
		result1 *csi.ProbeResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIdentityClient) GetPluginInfo(ctx context.Context, in *csi.GetPluginInfoRequest, opts ...grpc.CallOption) (*csi.GetPluginInfoResponse, error) {
	fake.getPluginInfoMutex.Lock()
	ret, specificReturn := fake.getPluginInfoReturnsOnCall[len(fake.getPluginInfoArgsForCall)]
	fake.getPluginInfoArgsForCall = append(fake.getPluginInfoArgsForCall, struct {
		ctx  context.Context
		in   *csi.GetPluginInfoRequest
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("GetPluginInfo", []interface{}{ctx, in, opts})
	fake.getPluginInfoMutex.Unlock()
	if fake.GetPluginInfoStub != nil {
		return fake.GetPluginInfoStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPluginInfoReturns.result1, fake.getPluginInfoReturns.result2
}

func (fake *FakeIdentityClient) GetPluginInfoCallCount() int {
	fake.getPluginInfoMutex.RLock()
	defer fake.getPluginInfoMutex.RUnlock()
	return len(fake.getPluginInfoArgsForCall)
}

func (fake *FakeIdentityClient) GetPluginInfoArgsForCall(i int) (context.Context, *csi.GetPluginInfoRequest, []grpc.CallOption) {
	fake.getPluginInfoMutex.RLock()
	defer fake.getPluginInfoMutex.RUnlock()
	return fake.getPluginInfoArgsForCall[i].ctx, fake.getPluginInfoArgsForCall[i].in, fake.getPluginInfoArgsForCall[i].opts
}

func (fake *FakeIdentityClient) GetPluginInfoReturns(result1 *csi.GetPluginInfoResponse, result2 error) {
	fake.GetPluginInfoStub = nil
	fake.getPluginInfoReturns = struct {
		result1 *csi.GetPluginInfoResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIdentityClient) GetPluginInfoReturnsOnCall(i int, result1 *csi.GetPluginInfoResponse, result2 error) {
	fake.GetPluginInfoStub = nil
	if fake.getPluginInfoReturnsOnCall == nil {
		fake.getPluginInfoReturnsOnCall = make(map[int]struct {
			result1 *csi.GetPluginInfoResponse
			result2 error
		})
	}
	fake.getPluginInfoReturnsOnCall[i] = struct {
		result1 *csi.GetPluginInfoResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIdentityClient) GetPluginCapabilities(ctx context.Context, in *csi.GetPluginCapabilitiesRequest, opts ...grpc.CallOption) (*csi.GetPluginCapabilitiesResponse, error) {
	fake.getPluginCapabilitiesMutex.Lock()
	ret, specificReturn := fake.getPluginCapabilitiesReturnsOnCall[len(fake.getPluginCapabilitiesArgsForCall)]
	fake.getPluginCapabilitiesArgsForCall = append(fake.getPluginCapabilitiesArgsForCall, struct {
		ctx  context.Context
		in   *csi.GetPluginCapabilitiesRequest
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("GetPluginCapabilities", []interface{}{ctx, in, opts})
	fake.getPluginCapabilitiesMutex.Unlock()
	if fake.GetPluginCapabilitiesStub != nil {
		return fake.GetPluginCapabilitiesStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPluginCapabilitiesReturns.result1, fake.getPluginCapabilitiesReturns.result2
}

func (fake *FakeIdentityClient) GetPluginCapabilitiesCallCount() int {
	fake.getPluginCapabilitiesMutex.RLock()
	defer fake.getPluginCapabilitiesMutex.RUnlock()
	return len(fake.getPluginCapabilitiesArgsForCall)
}

func (fake *FakeIdentityClient) GetPluginCapabilitiesArgsForCall(i int) (context.Context, *csi.GetPluginCapabilitiesRequest, []grpc.CallOption) {
	fake.getPluginCapabilitiesMutex.RLock()
	defer fake.getPluginCapabilitiesMutex.RUnlock()
	return fake.getPluginCapabilitiesArgsForCall[i].ctx, fake.getPluginCapabilitiesArgsForCall[i].in, fake.getPluginCapabilitiesArgsForCall[i].opts
}

func (fake *FakeIdentityClient) GetPluginCapabilitiesReturns(result1 *csi.GetPluginCapabilitiesResponse, result2 error) {
	fake.GetPluginCapabilitiesStub = nil
	fake.getPluginCapabilitiesReturns = struct {
		result1 *csi.GetPluginCapabilitiesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIdentityClient) GetPluginCapabilitiesReturnsOnCall(i int, result1 *csi.GetPluginCapabilitiesResponse, result2 error) {
	fake.GetPluginCapabilitiesStub = nil
	if fake.getPluginCapabilitiesReturnsOnCall == nil {
		fake.getPluginCapabilitiesReturnsOnCall = make(map[int]struct {
			result1 *csi.GetPluginCapabilitiesResponse
			result2 error
		})
	}
	fake.getPluginCapabilitiesReturnsOnCall[i] = struct {
		result1 *csi.GetPluginCapabilitiesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIdentityClient) Probe(ctx context.Context, in *csi.ProbeRequest, opts ...grpc.CallOption) (*csi.ProbeResponse, error) {
	fake.probeMutex.Lock()
	ret, specificReturn := fake.probeReturnsOnCall[len(fake.probeArgsForCall)]
	fake.probeArgsForCall = append(fake.probeArgsForCall, struct {
		ctx  context.Context
		in   *csi.ProbeRequest
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("Probe", []interface{}{ctx, in, opts})
	fake.probeMutex.Unlock()
	if fake.ProbeStub != nil {
		return fake.ProbeStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.probeReturns.result1, fake.probeReturns.result2
}

func (fake *FakeIdentityClient) ProbeCallCount() int {
	fake.probeMutex.RLock()
	defer fake.probeMutex.RUnlock()
	return len(fake.probeArgsForCall)
}

func (fake *FakeIdentityClient) ProbeArgsForCall(i int) (context.Context, *csi.ProbeRequest, []grpc.CallOption) {
	fake.probeMutex.RLock()
	defer fake.probeMutex.RUnlock()
	return fake.probeArgsForCall[i].ctx, fake.probeArgsForCall[i].in, fake.probeArgsForCall[i].opts
}

func (fake *FakeIdentityClient) ProbeReturns(result1 *csi.ProbeResponse, result2 error) {
	fake.ProbeStub = nil
	fake.probeReturns = struct {
		result1 *csi.ProbeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIdentityClient) ProbeReturnsOnCall(i int, result1 *csi.ProbeResponse, result2 error) {
	fake.ProbeStub = nil
	if fake.probeReturnsOnCall == nil {
		fake.probeReturnsOnCall = make(map[int]struct {
			result1 *csi.ProbeResponse
			result2 error
		})
	}
	fake.probeReturnsOnCall[i] = struct {
		result1 *csi.ProbeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeIdentityClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPluginInfoMutex.RLock()
	defer fake.getPluginInfoMutex.RUnlock()
	fake.getPluginCapabilitiesMutex.RLock()
	defer fake.getPluginCapabilitiesMutex.RUnlock()
	fake.probeMutex.RLock()
	defer fake.probeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIdentityClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csi.IdentityClient = new(FakeIdentityClient)
