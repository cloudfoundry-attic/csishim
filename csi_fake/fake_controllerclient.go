// Code generated by counterfeiter. DO NOT EDIT.
package csi_fake

import (
	context "context"
	sync "sync"

	csi "github.com/container-storage-interface/spec/lib/go/csi"
	grpc "google.golang.org/grpc"
)

type FakeControllerClient struct {
	ControllerGetCapabilitiesStub        func(context.Context, *csi.ControllerGetCapabilitiesRequest, ...grpc.CallOption) (*csi.ControllerGetCapabilitiesResponse, error)
	controllerGetCapabilitiesMutex       sync.RWMutex
	controllerGetCapabilitiesArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.ControllerGetCapabilitiesRequest
		arg3 []grpc.CallOption
	}
	controllerGetCapabilitiesReturns struct {
		result1 *csi.ControllerGetCapabilitiesResponse
		result2 error
	}
	controllerGetCapabilitiesReturnsOnCall map[int]struct {
		result1 *csi.ControllerGetCapabilitiesResponse
		result2 error
	}
	ControllerPublishVolumeStub        func(context.Context, *csi.ControllerPublishVolumeRequest, ...grpc.CallOption) (*csi.ControllerPublishVolumeResponse, error)
	controllerPublishVolumeMutex       sync.RWMutex
	controllerPublishVolumeArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.ControllerPublishVolumeRequest
		arg3 []grpc.CallOption
	}
	controllerPublishVolumeReturns struct {
		result1 *csi.ControllerPublishVolumeResponse
		result2 error
	}
	controllerPublishVolumeReturnsOnCall map[int]struct {
		result1 *csi.ControllerPublishVolumeResponse
		result2 error
	}
	ControllerUnpublishVolumeStub        func(context.Context, *csi.ControllerUnpublishVolumeRequest, ...grpc.CallOption) (*csi.ControllerUnpublishVolumeResponse, error)
	controllerUnpublishVolumeMutex       sync.RWMutex
	controllerUnpublishVolumeArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.ControllerUnpublishVolumeRequest
		arg3 []grpc.CallOption
	}
	controllerUnpublishVolumeReturns struct {
		result1 *csi.ControllerUnpublishVolumeResponse
		result2 error
	}
	controllerUnpublishVolumeReturnsOnCall map[int]struct {
		result1 *csi.ControllerUnpublishVolumeResponse
		result2 error
	}
	CreateSnapshotStub        func(context.Context, *csi.CreateSnapshotRequest, ...grpc.CallOption) (*csi.CreateSnapshotResponse, error)
	createSnapshotMutex       sync.RWMutex
	createSnapshotArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.CreateSnapshotRequest
		arg3 []grpc.CallOption
	}
	createSnapshotReturns struct {
		result1 *csi.CreateSnapshotResponse
		result2 error
	}
	createSnapshotReturnsOnCall map[int]struct {
		result1 *csi.CreateSnapshotResponse
		result2 error
	}
	CreateVolumeStub        func(context.Context, *csi.CreateVolumeRequest, ...grpc.CallOption) (*csi.CreateVolumeResponse, error)
	createVolumeMutex       sync.RWMutex
	createVolumeArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.CreateVolumeRequest
		arg3 []grpc.CallOption
	}
	createVolumeReturns struct {
		result1 *csi.CreateVolumeResponse
		result2 error
	}
	createVolumeReturnsOnCall map[int]struct {
		result1 *csi.CreateVolumeResponse
		result2 error
	}
	DeleteSnapshotStub        func(context.Context, *csi.DeleteSnapshotRequest, ...grpc.CallOption) (*csi.DeleteSnapshotResponse, error)
	deleteSnapshotMutex       sync.RWMutex
	deleteSnapshotArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.DeleteSnapshotRequest
		arg3 []grpc.CallOption
	}
	deleteSnapshotReturns struct {
		result1 *csi.DeleteSnapshotResponse
		result2 error
	}
	deleteSnapshotReturnsOnCall map[int]struct {
		result1 *csi.DeleteSnapshotResponse
		result2 error
	}
	DeleteVolumeStub        func(context.Context, *csi.DeleteVolumeRequest, ...grpc.CallOption) (*csi.DeleteVolumeResponse, error)
	deleteVolumeMutex       sync.RWMutex
	deleteVolumeArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.DeleteVolumeRequest
		arg3 []grpc.CallOption
	}
	deleteVolumeReturns struct {
		result1 *csi.DeleteVolumeResponse
		result2 error
	}
	deleteVolumeReturnsOnCall map[int]struct {
		result1 *csi.DeleteVolumeResponse
		result2 error
	}
	GetCapacityStub        func(context.Context, *csi.GetCapacityRequest, ...grpc.CallOption) (*csi.GetCapacityResponse, error)
	getCapacityMutex       sync.RWMutex
	getCapacityArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.GetCapacityRequest
		arg3 []grpc.CallOption
	}
	getCapacityReturns struct {
		result1 *csi.GetCapacityResponse
		result2 error
	}
	getCapacityReturnsOnCall map[int]struct {
		result1 *csi.GetCapacityResponse
		result2 error
	}
	ListSnapshotsStub        func(context.Context, *csi.ListSnapshotsRequest, ...grpc.CallOption) (*csi.ListSnapshotsResponse, error)
	listSnapshotsMutex       sync.RWMutex
	listSnapshotsArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.ListSnapshotsRequest
		arg3 []grpc.CallOption
	}
	listSnapshotsReturns struct {
		result1 *csi.ListSnapshotsResponse
		result2 error
	}
	listSnapshotsReturnsOnCall map[int]struct {
		result1 *csi.ListSnapshotsResponse
		result2 error
	}
	ListVolumesStub        func(context.Context, *csi.ListVolumesRequest, ...grpc.CallOption) (*csi.ListVolumesResponse, error)
	listVolumesMutex       sync.RWMutex
	listVolumesArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.ListVolumesRequest
		arg3 []grpc.CallOption
	}
	listVolumesReturns struct {
		result1 *csi.ListVolumesResponse
		result2 error
	}
	listVolumesReturnsOnCall map[int]struct {
		result1 *csi.ListVolumesResponse
		result2 error
	}
	ValidateVolumeCapabilitiesStub        func(context.Context, *csi.ValidateVolumeCapabilitiesRequest, ...grpc.CallOption) (*csi.ValidateVolumeCapabilitiesResponse, error)
	validateVolumeCapabilitiesMutex       sync.RWMutex
	validateVolumeCapabilitiesArgsForCall []struct {
		arg1 context.Context
		arg2 *csi.ValidateVolumeCapabilitiesRequest
		arg3 []grpc.CallOption
	}
	validateVolumeCapabilitiesReturns struct {
		result1 *csi.ValidateVolumeCapabilitiesResponse
		result2 error
	}
	validateVolumeCapabilitiesReturnsOnCall map[int]struct {
		result1 *csi.ValidateVolumeCapabilitiesResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeControllerClient) ControllerGetCapabilities(arg1 context.Context, arg2 *csi.ControllerGetCapabilitiesRequest, arg3 ...grpc.CallOption) (*csi.ControllerGetCapabilitiesResponse, error) {
	fake.controllerGetCapabilitiesMutex.Lock()
	ret, specificReturn := fake.controllerGetCapabilitiesReturnsOnCall[len(fake.controllerGetCapabilitiesArgsForCall)]
	fake.controllerGetCapabilitiesArgsForCall = append(fake.controllerGetCapabilitiesArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.ControllerGetCapabilitiesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ControllerGetCapabilities", []interface{}{arg1, arg2, arg3})
	fake.controllerGetCapabilitiesMutex.Unlock()
	if fake.ControllerGetCapabilitiesStub != nil {
		return fake.ControllerGetCapabilitiesStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.controllerGetCapabilitiesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) ControllerGetCapabilitiesCallCount() int {
	fake.controllerGetCapabilitiesMutex.RLock()
	defer fake.controllerGetCapabilitiesMutex.RUnlock()
	return len(fake.controllerGetCapabilitiesArgsForCall)
}

func (fake *FakeControllerClient) ControllerGetCapabilitiesCalls(stub func(context.Context, *csi.ControllerGetCapabilitiesRequest, ...grpc.CallOption) (*csi.ControllerGetCapabilitiesResponse, error)) {
	fake.controllerGetCapabilitiesMutex.Lock()
	defer fake.controllerGetCapabilitiesMutex.Unlock()
	fake.ControllerGetCapabilitiesStub = stub
}

func (fake *FakeControllerClient) ControllerGetCapabilitiesArgsForCall(i int) (context.Context, *csi.ControllerGetCapabilitiesRequest, []grpc.CallOption) {
	fake.controllerGetCapabilitiesMutex.RLock()
	defer fake.controllerGetCapabilitiesMutex.RUnlock()
	argsForCall := fake.controllerGetCapabilitiesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) ControllerGetCapabilitiesReturns(result1 *csi.ControllerGetCapabilitiesResponse, result2 error) {
	fake.controllerGetCapabilitiesMutex.Lock()
	defer fake.controllerGetCapabilitiesMutex.Unlock()
	fake.ControllerGetCapabilitiesStub = nil
	fake.controllerGetCapabilitiesReturns = struct {
		result1 *csi.ControllerGetCapabilitiesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ControllerGetCapabilitiesReturnsOnCall(i int, result1 *csi.ControllerGetCapabilitiesResponse, result2 error) {
	fake.controllerGetCapabilitiesMutex.Lock()
	defer fake.controllerGetCapabilitiesMutex.Unlock()
	fake.ControllerGetCapabilitiesStub = nil
	if fake.controllerGetCapabilitiesReturnsOnCall == nil {
		fake.controllerGetCapabilitiesReturnsOnCall = make(map[int]struct {
			result1 *csi.ControllerGetCapabilitiesResponse
			result2 error
		})
	}
	fake.controllerGetCapabilitiesReturnsOnCall[i] = struct {
		result1 *csi.ControllerGetCapabilitiesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ControllerPublishVolume(arg1 context.Context, arg2 *csi.ControllerPublishVolumeRequest, arg3 ...grpc.CallOption) (*csi.ControllerPublishVolumeResponse, error) {
	fake.controllerPublishVolumeMutex.Lock()
	ret, specificReturn := fake.controllerPublishVolumeReturnsOnCall[len(fake.controllerPublishVolumeArgsForCall)]
	fake.controllerPublishVolumeArgsForCall = append(fake.controllerPublishVolumeArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.ControllerPublishVolumeRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ControllerPublishVolume", []interface{}{arg1, arg2, arg3})
	fake.controllerPublishVolumeMutex.Unlock()
	if fake.ControllerPublishVolumeStub != nil {
		return fake.ControllerPublishVolumeStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.controllerPublishVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) ControllerPublishVolumeCallCount() int {
	fake.controllerPublishVolumeMutex.RLock()
	defer fake.controllerPublishVolumeMutex.RUnlock()
	return len(fake.controllerPublishVolumeArgsForCall)
}

func (fake *FakeControllerClient) ControllerPublishVolumeCalls(stub func(context.Context, *csi.ControllerPublishVolumeRequest, ...grpc.CallOption) (*csi.ControllerPublishVolumeResponse, error)) {
	fake.controllerPublishVolumeMutex.Lock()
	defer fake.controllerPublishVolumeMutex.Unlock()
	fake.ControllerPublishVolumeStub = stub
}

func (fake *FakeControllerClient) ControllerPublishVolumeArgsForCall(i int) (context.Context, *csi.ControllerPublishVolumeRequest, []grpc.CallOption) {
	fake.controllerPublishVolumeMutex.RLock()
	defer fake.controllerPublishVolumeMutex.RUnlock()
	argsForCall := fake.controllerPublishVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) ControllerPublishVolumeReturns(result1 *csi.ControllerPublishVolumeResponse, result2 error) {
	fake.controllerPublishVolumeMutex.Lock()
	defer fake.controllerPublishVolumeMutex.Unlock()
	fake.ControllerPublishVolumeStub = nil
	fake.controllerPublishVolumeReturns = struct {
		result1 *csi.ControllerPublishVolumeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ControllerPublishVolumeReturnsOnCall(i int, result1 *csi.ControllerPublishVolumeResponse, result2 error) {
	fake.controllerPublishVolumeMutex.Lock()
	defer fake.controllerPublishVolumeMutex.Unlock()
	fake.ControllerPublishVolumeStub = nil
	if fake.controllerPublishVolumeReturnsOnCall == nil {
		fake.controllerPublishVolumeReturnsOnCall = make(map[int]struct {
			result1 *csi.ControllerPublishVolumeResponse
			result2 error
		})
	}
	fake.controllerPublishVolumeReturnsOnCall[i] = struct {
		result1 *csi.ControllerPublishVolumeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ControllerUnpublishVolume(arg1 context.Context, arg2 *csi.ControllerUnpublishVolumeRequest, arg3 ...grpc.CallOption) (*csi.ControllerUnpublishVolumeResponse, error) {
	fake.controllerUnpublishVolumeMutex.Lock()
	ret, specificReturn := fake.controllerUnpublishVolumeReturnsOnCall[len(fake.controllerUnpublishVolumeArgsForCall)]
	fake.controllerUnpublishVolumeArgsForCall = append(fake.controllerUnpublishVolumeArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.ControllerUnpublishVolumeRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ControllerUnpublishVolume", []interface{}{arg1, arg2, arg3})
	fake.controllerUnpublishVolumeMutex.Unlock()
	if fake.ControllerUnpublishVolumeStub != nil {
		return fake.ControllerUnpublishVolumeStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.controllerUnpublishVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) ControllerUnpublishVolumeCallCount() int {
	fake.controllerUnpublishVolumeMutex.RLock()
	defer fake.controllerUnpublishVolumeMutex.RUnlock()
	return len(fake.controllerUnpublishVolumeArgsForCall)
}

func (fake *FakeControllerClient) ControllerUnpublishVolumeCalls(stub func(context.Context, *csi.ControllerUnpublishVolumeRequest, ...grpc.CallOption) (*csi.ControllerUnpublishVolumeResponse, error)) {
	fake.controllerUnpublishVolumeMutex.Lock()
	defer fake.controllerUnpublishVolumeMutex.Unlock()
	fake.ControllerUnpublishVolumeStub = stub
}

func (fake *FakeControllerClient) ControllerUnpublishVolumeArgsForCall(i int) (context.Context, *csi.ControllerUnpublishVolumeRequest, []grpc.CallOption) {
	fake.controllerUnpublishVolumeMutex.RLock()
	defer fake.controllerUnpublishVolumeMutex.RUnlock()
	argsForCall := fake.controllerUnpublishVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) ControllerUnpublishVolumeReturns(result1 *csi.ControllerUnpublishVolumeResponse, result2 error) {
	fake.controllerUnpublishVolumeMutex.Lock()
	defer fake.controllerUnpublishVolumeMutex.Unlock()
	fake.ControllerUnpublishVolumeStub = nil
	fake.controllerUnpublishVolumeReturns = struct {
		result1 *csi.ControllerUnpublishVolumeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ControllerUnpublishVolumeReturnsOnCall(i int, result1 *csi.ControllerUnpublishVolumeResponse, result2 error) {
	fake.controllerUnpublishVolumeMutex.Lock()
	defer fake.controllerUnpublishVolumeMutex.Unlock()
	fake.ControllerUnpublishVolumeStub = nil
	if fake.controllerUnpublishVolumeReturnsOnCall == nil {
		fake.controllerUnpublishVolumeReturnsOnCall = make(map[int]struct {
			result1 *csi.ControllerUnpublishVolumeResponse
			result2 error
		})
	}
	fake.controllerUnpublishVolumeReturnsOnCall[i] = struct {
		result1 *csi.ControllerUnpublishVolumeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) CreateSnapshot(arg1 context.Context, arg2 *csi.CreateSnapshotRequest, arg3 ...grpc.CallOption) (*csi.CreateSnapshotResponse, error) {
	fake.createSnapshotMutex.Lock()
	ret, specificReturn := fake.createSnapshotReturnsOnCall[len(fake.createSnapshotArgsForCall)]
	fake.createSnapshotArgsForCall = append(fake.createSnapshotArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.CreateSnapshotRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSnapshot", []interface{}{arg1, arg2, arg3})
	fake.createSnapshotMutex.Unlock()
	if fake.CreateSnapshotStub != nil {
		return fake.CreateSnapshotStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSnapshotReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) CreateSnapshotCallCount() int {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return len(fake.createSnapshotArgsForCall)
}

func (fake *FakeControllerClient) CreateSnapshotCalls(stub func(context.Context, *csi.CreateSnapshotRequest, ...grpc.CallOption) (*csi.CreateSnapshotResponse, error)) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = stub
}

func (fake *FakeControllerClient) CreateSnapshotArgsForCall(i int) (context.Context, *csi.CreateSnapshotRequest, []grpc.CallOption) {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	argsForCall := fake.createSnapshotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) CreateSnapshotReturns(result1 *csi.CreateSnapshotResponse, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	fake.createSnapshotReturns = struct {
		result1 *csi.CreateSnapshotResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) CreateSnapshotReturnsOnCall(i int, result1 *csi.CreateSnapshotResponse, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	if fake.createSnapshotReturnsOnCall == nil {
		fake.createSnapshotReturnsOnCall = make(map[int]struct {
			result1 *csi.CreateSnapshotResponse
			result2 error
		})
	}
	fake.createSnapshotReturnsOnCall[i] = struct {
		result1 *csi.CreateSnapshotResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) CreateVolume(arg1 context.Context, arg2 *csi.CreateVolumeRequest, arg3 ...grpc.CallOption) (*csi.CreateVolumeResponse, error) {
	fake.createVolumeMutex.Lock()
	ret, specificReturn := fake.createVolumeReturnsOnCall[len(fake.createVolumeArgsForCall)]
	fake.createVolumeArgsForCall = append(fake.createVolumeArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.CreateVolumeRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVolume", []interface{}{arg1, arg2, arg3})
	fake.createVolumeMutex.Unlock()
	if fake.CreateVolumeStub != nil {
		return fake.CreateVolumeStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) CreateVolumeCallCount() int {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return len(fake.createVolumeArgsForCall)
}

func (fake *FakeControllerClient) CreateVolumeCalls(stub func(context.Context, *csi.CreateVolumeRequest, ...grpc.CallOption) (*csi.CreateVolumeResponse, error)) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = stub
}

func (fake *FakeControllerClient) CreateVolumeArgsForCall(i int) (context.Context, *csi.CreateVolumeRequest, []grpc.CallOption) {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	argsForCall := fake.createVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) CreateVolumeReturns(result1 *csi.CreateVolumeResponse, result2 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	fake.createVolumeReturns = struct {
		result1 *csi.CreateVolumeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) CreateVolumeReturnsOnCall(i int, result1 *csi.CreateVolumeResponse, result2 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	if fake.createVolumeReturnsOnCall == nil {
		fake.createVolumeReturnsOnCall = make(map[int]struct {
			result1 *csi.CreateVolumeResponse
			result2 error
		})
	}
	fake.createVolumeReturnsOnCall[i] = struct {
		result1 *csi.CreateVolumeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) DeleteSnapshot(arg1 context.Context, arg2 *csi.DeleteSnapshotRequest, arg3 ...grpc.CallOption) (*csi.DeleteSnapshotResponse, error) {
	fake.deleteSnapshotMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotReturnsOnCall[len(fake.deleteSnapshotArgsForCall)]
	fake.deleteSnapshotArgsForCall = append(fake.deleteSnapshotArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.DeleteSnapshotRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSnapshot", []interface{}{arg1, arg2, arg3})
	fake.deleteSnapshotMutex.Unlock()
	if fake.DeleteSnapshotStub != nil {
		return fake.DeleteSnapshotStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSnapshotReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) DeleteSnapshotCallCount() int {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return len(fake.deleteSnapshotArgsForCall)
}

func (fake *FakeControllerClient) DeleteSnapshotCalls(stub func(context.Context, *csi.DeleteSnapshotRequest, ...grpc.CallOption) (*csi.DeleteSnapshotResponse, error)) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = stub
}

func (fake *FakeControllerClient) DeleteSnapshotArgsForCall(i int) (context.Context, *csi.DeleteSnapshotRequest, []grpc.CallOption) {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	argsForCall := fake.deleteSnapshotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) DeleteSnapshotReturns(result1 *csi.DeleteSnapshotResponse, result2 error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = nil
	fake.deleteSnapshotReturns = struct {
		result1 *csi.DeleteSnapshotResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) DeleteSnapshotReturnsOnCall(i int, result1 *csi.DeleteSnapshotResponse, result2 error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = nil
	if fake.deleteSnapshotReturnsOnCall == nil {
		fake.deleteSnapshotReturnsOnCall = make(map[int]struct {
			result1 *csi.DeleteSnapshotResponse
			result2 error
		})
	}
	fake.deleteSnapshotReturnsOnCall[i] = struct {
		result1 *csi.DeleteSnapshotResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) DeleteVolume(arg1 context.Context, arg2 *csi.DeleteVolumeRequest, arg3 ...grpc.CallOption) (*csi.DeleteVolumeResponse, error) {
	fake.deleteVolumeMutex.Lock()
	ret, specificReturn := fake.deleteVolumeReturnsOnCall[len(fake.deleteVolumeArgsForCall)]
	fake.deleteVolumeArgsForCall = append(fake.deleteVolumeArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.DeleteVolumeRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVolume", []interface{}{arg1, arg2, arg3})
	fake.deleteVolumeMutex.Unlock()
	if fake.DeleteVolumeStub != nil {
		return fake.DeleteVolumeStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) DeleteVolumeCallCount() int {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return len(fake.deleteVolumeArgsForCall)
}

func (fake *FakeControllerClient) DeleteVolumeCalls(stub func(context.Context, *csi.DeleteVolumeRequest, ...grpc.CallOption) (*csi.DeleteVolumeResponse, error)) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = stub
}

func (fake *FakeControllerClient) DeleteVolumeArgsForCall(i int) (context.Context, *csi.DeleteVolumeRequest, []grpc.CallOption) {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	argsForCall := fake.deleteVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) DeleteVolumeReturns(result1 *csi.DeleteVolumeResponse, result2 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	fake.deleteVolumeReturns = struct {
		result1 *csi.DeleteVolumeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) DeleteVolumeReturnsOnCall(i int, result1 *csi.DeleteVolumeResponse, result2 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	if fake.deleteVolumeReturnsOnCall == nil {
		fake.deleteVolumeReturnsOnCall = make(map[int]struct {
			result1 *csi.DeleteVolumeResponse
			result2 error
		})
	}
	fake.deleteVolumeReturnsOnCall[i] = struct {
		result1 *csi.DeleteVolumeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) GetCapacity(arg1 context.Context, arg2 *csi.GetCapacityRequest, arg3 ...grpc.CallOption) (*csi.GetCapacityResponse, error) {
	fake.getCapacityMutex.Lock()
	ret, specificReturn := fake.getCapacityReturnsOnCall[len(fake.getCapacityArgsForCall)]
	fake.getCapacityArgsForCall = append(fake.getCapacityArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.GetCapacityRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetCapacity", []interface{}{arg1, arg2, arg3})
	fake.getCapacityMutex.Unlock()
	if fake.GetCapacityStub != nil {
		return fake.GetCapacityStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCapacityReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) GetCapacityCallCount() int {
	fake.getCapacityMutex.RLock()
	defer fake.getCapacityMutex.RUnlock()
	return len(fake.getCapacityArgsForCall)
}

func (fake *FakeControllerClient) GetCapacityCalls(stub func(context.Context, *csi.GetCapacityRequest, ...grpc.CallOption) (*csi.GetCapacityResponse, error)) {
	fake.getCapacityMutex.Lock()
	defer fake.getCapacityMutex.Unlock()
	fake.GetCapacityStub = stub
}

func (fake *FakeControllerClient) GetCapacityArgsForCall(i int) (context.Context, *csi.GetCapacityRequest, []grpc.CallOption) {
	fake.getCapacityMutex.RLock()
	defer fake.getCapacityMutex.RUnlock()
	argsForCall := fake.getCapacityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) GetCapacityReturns(result1 *csi.GetCapacityResponse, result2 error) {
	fake.getCapacityMutex.Lock()
	defer fake.getCapacityMutex.Unlock()
	fake.GetCapacityStub = nil
	fake.getCapacityReturns = struct {
		result1 *csi.GetCapacityResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) GetCapacityReturnsOnCall(i int, result1 *csi.GetCapacityResponse, result2 error) {
	fake.getCapacityMutex.Lock()
	defer fake.getCapacityMutex.Unlock()
	fake.GetCapacityStub = nil
	if fake.getCapacityReturnsOnCall == nil {
		fake.getCapacityReturnsOnCall = make(map[int]struct {
			result1 *csi.GetCapacityResponse
			result2 error
		})
	}
	fake.getCapacityReturnsOnCall[i] = struct {
		result1 *csi.GetCapacityResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ListSnapshots(arg1 context.Context, arg2 *csi.ListSnapshotsRequest, arg3 ...grpc.CallOption) (*csi.ListSnapshotsResponse, error) {
	fake.listSnapshotsMutex.Lock()
	ret, specificReturn := fake.listSnapshotsReturnsOnCall[len(fake.listSnapshotsArgsForCall)]
	fake.listSnapshotsArgsForCall = append(fake.listSnapshotsArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.ListSnapshotsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListSnapshots", []interface{}{arg1, arg2, arg3})
	fake.listSnapshotsMutex.Unlock()
	if fake.ListSnapshotsStub != nil {
		return fake.ListSnapshotsStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSnapshotsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) ListSnapshotsCallCount() int {
	fake.listSnapshotsMutex.RLock()
	defer fake.listSnapshotsMutex.RUnlock()
	return len(fake.listSnapshotsArgsForCall)
}

func (fake *FakeControllerClient) ListSnapshotsCalls(stub func(context.Context, *csi.ListSnapshotsRequest, ...grpc.CallOption) (*csi.ListSnapshotsResponse, error)) {
	fake.listSnapshotsMutex.Lock()
	defer fake.listSnapshotsMutex.Unlock()
	fake.ListSnapshotsStub = stub
}

func (fake *FakeControllerClient) ListSnapshotsArgsForCall(i int) (context.Context, *csi.ListSnapshotsRequest, []grpc.CallOption) {
	fake.listSnapshotsMutex.RLock()
	defer fake.listSnapshotsMutex.RUnlock()
	argsForCall := fake.listSnapshotsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) ListSnapshotsReturns(result1 *csi.ListSnapshotsResponse, result2 error) {
	fake.listSnapshotsMutex.Lock()
	defer fake.listSnapshotsMutex.Unlock()
	fake.ListSnapshotsStub = nil
	fake.listSnapshotsReturns = struct {
		result1 *csi.ListSnapshotsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ListSnapshotsReturnsOnCall(i int, result1 *csi.ListSnapshotsResponse, result2 error) {
	fake.listSnapshotsMutex.Lock()
	defer fake.listSnapshotsMutex.Unlock()
	fake.ListSnapshotsStub = nil
	if fake.listSnapshotsReturnsOnCall == nil {
		fake.listSnapshotsReturnsOnCall = make(map[int]struct {
			result1 *csi.ListSnapshotsResponse
			result2 error
		})
	}
	fake.listSnapshotsReturnsOnCall[i] = struct {
		result1 *csi.ListSnapshotsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ListVolumes(arg1 context.Context, arg2 *csi.ListVolumesRequest, arg3 ...grpc.CallOption) (*csi.ListVolumesResponse, error) {
	fake.listVolumesMutex.Lock()
	ret, specificReturn := fake.listVolumesReturnsOnCall[len(fake.listVolumesArgsForCall)]
	fake.listVolumesArgsForCall = append(fake.listVolumesArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.ListVolumesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListVolumes", []interface{}{arg1, arg2, arg3})
	fake.listVolumesMutex.Unlock()
	if fake.ListVolumesStub != nil {
		return fake.ListVolumesStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listVolumesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) ListVolumesCallCount() int {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return len(fake.listVolumesArgsForCall)
}

func (fake *FakeControllerClient) ListVolumesCalls(stub func(context.Context, *csi.ListVolumesRequest, ...grpc.CallOption) (*csi.ListVolumesResponse, error)) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = stub
}

func (fake *FakeControllerClient) ListVolumesArgsForCall(i int) (context.Context, *csi.ListVolumesRequest, []grpc.CallOption) {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	argsForCall := fake.listVolumesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) ListVolumesReturns(result1 *csi.ListVolumesResponse, result2 error) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = nil
	fake.listVolumesReturns = struct {
		result1 *csi.ListVolumesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ListVolumesReturnsOnCall(i int, result1 *csi.ListVolumesResponse, result2 error) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = nil
	if fake.listVolumesReturnsOnCall == nil {
		fake.listVolumesReturnsOnCall = make(map[int]struct {
			result1 *csi.ListVolumesResponse
			result2 error
		})
	}
	fake.listVolumesReturnsOnCall[i] = struct {
		result1 *csi.ListVolumesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ValidateVolumeCapabilities(arg1 context.Context, arg2 *csi.ValidateVolumeCapabilitiesRequest, arg3 ...grpc.CallOption) (*csi.ValidateVolumeCapabilitiesResponse, error) {
	fake.validateVolumeCapabilitiesMutex.Lock()
	ret, specificReturn := fake.validateVolumeCapabilitiesReturnsOnCall[len(fake.validateVolumeCapabilitiesArgsForCall)]
	fake.validateVolumeCapabilitiesArgsForCall = append(fake.validateVolumeCapabilitiesArgsForCall, struct {
		arg1 context.Context
		arg2 *csi.ValidateVolumeCapabilitiesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ValidateVolumeCapabilities", []interface{}{arg1, arg2, arg3})
	fake.validateVolumeCapabilitiesMutex.Unlock()
	if fake.ValidateVolumeCapabilitiesStub != nil {
		return fake.ValidateVolumeCapabilitiesStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.validateVolumeCapabilitiesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeControllerClient) ValidateVolumeCapabilitiesCallCount() int {
	fake.validateVolumeCapabilitiesMutex.RLock()
	defer fake.validateVolumeCapabilitiesMutex.RUnlock()
	return len(fake.validateVolumeCapabilitiesArgsForCall)
}

func (fake *FakeControllerClient) ValidateVolumeCapabilitiesCalls(stub func(context.Context, *csi.ValidateVolumeCapabilitiesRequest, ...grpc.CallOption) (*csi.ValidateVolumeCapabilitiesResponse, error)) {
	fake.validateVolumeCapabilitiesMutex.Lock()
	defer fake.validateVolumeCapabilitiesMutex.Unlock()
	fake.ValidateVolumeCapabilitiesStub = stub
}

func (fake *FakeControllerClient) ValidateVolumeCapabilitiesArgsForCall(i int) (context.Context, *csi.ValidateVolumeCapabilitiesRequest, []grpc.CallOption) {
	fake.validateVolumeCapabilitiesMutex.RLock()
	defer fake.validateVolumeCapabilitiesMutex.RUnlock()
	argsForCall := fake.validateVolumeCapabilitiesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeControllerClient) ValidateVolumeCapabilitiesReturns(result1 *csi.ValidateVolumeCapabilitiesResponse, result2 error) {
	fake.validateVolumeCapabilitiesMutex.Lock()
	defer fake.validateVolumeCapabilitiesMutex.Unlock()
	fake.ValidateVolumeCapabilitiesStub = nil
	fake.validateVolumeCapabilitiesReturns = struct {
		result1 *csi.ValidateVolumeCapabilitiesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) ValidateVolumeCapabilitiesReturnsOnCall(i int, result1 *csi.ValidateVolumeCapabilitiesResponse, result2 error) {
	fake.validateVolumeCapabilitiesMutex.Lock()
	defer fake.validateVolumeCapabilitiesMutex.Unlock()
	fake.ValidateVolumeCapabilitiesStub = nil
	if fake.validateVolumeCapabilitiesReturnsOnCall == nil {
		fake.validateVolumeCapabilitiesReturnsOnCall = make(map[int]struct {
			result1 *csi.ValidateVolumeCapabilitiesResponse
			result2 error
		})
	}
	fake.validateVolumeCapabilitiesReturnsOnCall[i] = struct {
		result1 *csi.ValidateVolumeCapabilitiesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeControllerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.controllerGetCapabilitiesMutex.RLock()
	defer fake.controllerGetCapabilitiesMutex.RUnlock()
	fake.controllerPublishVolumeMutex.RLock()
	defer fake.controllerPublishVolumeMutex.RUnlock()
	fake.controllerUnpublishVolumeMutex.RLock()
	defer fake.controllerUnpublishVolumeMutex.RUnlock()
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	fake.getCapacityMutex.RLock()
	defer fake.getCapacityMutex.RUnlock()
	fake.listSnapshotsMutex.RLock()
	defer fake.listSnapshotsMutex.RUnlock()
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	fake.validateVolumeCapabilitiesMutex.RLock()
	defer fake.validateVolumeCapabilitiesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeControllerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csi.ControllerClient = new(FakeControllerClient)
